Author: Guillem Jover <guillem@debian.org>

---
 Makefile            |    6 ++++
 Makefile.cfg        |   29 +++++++++++++++++++--
 gl/driver.c         |    2 -
 gl/scale.c          |   14 ++++++++--
 src/Makefile        |    9 ++++++
 src/libvga.h        |   69 +++++++++++++++++++++++++++++++++-------------------
 src/vga.c           |   24 ++++++++++++++++--
 src/vgaconvplanar.c |    2 -
 src/vgapix.c        |    2 -
 9 files changed, 120 insertions(+), 37 deletions(-)

--- a/Makefile.cfg
+++ b/Makefile.cfg
@@ -16,6 +16,9 @@ VERSION = $(MAJOR_VER).$(MINOR_VER)
 # Configuration Section
 #----------------------------------------------------------------------
 
+# Architecture
+arch = $(shell uname -m | sed 's/i.86.*/i386/;s/arm.*/arm/')
+
 # Source directory.
 #srcdir = /usr/local/src/svgalib-$(VERSION)
 srcdir = $(shell sh -c pwd)
@@ -52,7 +55,13 @@ TARGET_FORMAT = elf
 
 #uncomment this if your compiler fails on compiling the assembler in
 #src/vgaconvplanar.c, gl/inlstring.h, gl/line.c or gl/scale.c
-# NO_ASM = y
+ifneq (i386, $(arch))
+NO_ASM = y
+endif
+
+ifneq (,$(findstring $(arch),i386 x86_64 alpha))
+IO_DRIVERS = y
+endif
 
 # Uncomment this if you want root processes to be able to always get a new
 # VC. Alas, some games misuse suid root privs and become root, svgalib cannot
@@ -123,6 +132,9 @@ INSTALLMAN = installman
 #
 # Comment out any driver that you don't want included in the library.
 #
+
+ifeq (y, $(IO_DRIVERS))
+INCLUDE_VGA_DRIVER = y
 INCLUDE_ET4000_DRIVER = y
 INCLUDE_CIRRUS_DRIVER = y
 INCLUDE_TVGA_DRIVER = y
@@ -150,13 +162,17 @@ INCLUDE_LAGUNA_DRIVER = y
 INCLUDE_NEO_DRIVER = y
 INCLUDE_R128_DRIVER = y
 INCLUDE_G400_DRIVER = y
+INCLUDE_SAVAGE_DRIVER = y
+endif
 ifndef SUPPRESS_FOR_LIBC5
 INCLUDE_FBDEV_DRIVER = y
 endif
-INCLUDE_SAVAGE_DRIVER = y
+
 #
 # Comment out any adapter you don't want to autodetect.
 #
+ifeq (y, $(IO_DRIVERS))
+INCLUDE_VGA_DRIVER_TEST = y
 INCLUDE_ET4000_DRIVER_TEST = y
 INCLUDE_CIRRUS_DRIVER_TEST = y
 INCLUDE_TVGA_DRIVER_TEST = y
@@ -183,17 +199,20 @@ INCLUDE_LAGUNA_DRIVER_TEST = y
 INCLUDE_NEO_DRIVER_TEST = y
 INCLUDE_G400_DRIVER_TEST = y
 INCLUDE_R128_DRIVER_TEST = y
-#INCLUDE_FBDEV_DRIVER_TEST = y
 INCLUDE_SAVAGE_DRIVER_TEST = y
 
 #Might be too dangerous:
 INCLUDE_VESA_DRIVER_TEST = y
+endif
+
+#INCLUDE_FBDEV_DRIVER_TEST = y
 
 #
 # Comment out any dac support that you don't want included in the library.
 #
 # you must include SIERRA_DAC, if you include any of SCxxxx DACs.
 
+ifeq (y, $(IO_DRIVERS))
 INCLUDE_NORMAL_DAC = y
 INCLUDE_S3_SDAC_DAC = y
 INCLUDE_S3_GENDAC_DAC = y
@@ -205,17 +224,21 @@ INCLUDE_ATT20C498_DAC = y
 INCLUDE_ICW_DAC = y
 INCLUDE_IBMRGB52x_DAC = y
 INCLUDE_SC1148X_DAC = y
+endif
 
 #
 # Comment out any dac you don't want to autodetect.
 # (not all dacs can be autodetected, at this time)
 #
+
+ifeq (y, $(IO_DRIVERS))
 INCLUDE_S3_SDAC_DAC_TEST = y
 INCLUDE_S3_GENDAC_DAC_TEST = y
 INCLUDE_SC15025_DAC_TEST = y
 INCLUDE_ATT20C490_DAC_TEST = y
 INCLUDE_IBMRGB52x_DAC_TEST = y
 INCLUDE_SC1148X_DAC_TEST = y
+endif
 
 # Location of the svgalib configuration file.
 SVGALIB_CONFIG_FILE = $(datadir)/libvga.config
--- a/Makefile
+++ b/Makefile
@@ -173,6 +173,7 @@ installutils: textutils lrmi
 		echo No $(bindir) directory, creating it.; \
 		mkdir $(bindir); \
 	fi
+ifeq (y, $(IO_DRIVERS))
 	@echo Installing textmode utilities in $(bindir):
 	@echo "restorefont:      Save/restore textmode font."
 	@$(INSTALL_SUID) utils/restorefont $(bindir)
@@ -186,6 +187,7 @@ installutils: textutils lrmi
 	@cp utils/textmode $(bindir)
 	@echo "savetextmode:     Script that saves textmode information used by 'textmode'."
 	@cp utils/savetextmode $(bindir)
+endif
 	@echo "mode3:            Restore textmode by setting VESA mode 3."
 	@cp lrmi-0.6m/mode3 $(bindir)
 	@echo "vga_reset:        Restore textmode by resetting graphic board."
@@ -397,12 +399,16 @@ demoprogs: $(PREDEMO) $(DEMODIRS)
 	done
 
 textutils: $(UTILDIRS)
+ifeq (y, $(IO_DRIVERS))
 	(cd utils; \
 	$(MAKE) -f $(srcdir)/utils/Makefile srcdir="$(srcdir)")
+endif
 
 lrmi:
+ifneq (y, $(NO_ASM))
 	(cd lrmi-0.6m;\
 	$(MAKE))
+endif
 
 backup: $(BACKUP)
 
--- a/gl/driver.c
+++ b/gl/driver.c
@@ -33,7 +33,7 @@ static inline int RGB2BGR(int c)
 /* However bswap is not supported by 386 */
 
     if (MODEFLAGS & MODEFLAG_24BPP_REVERSED)
-#ifdef __alpha__
+#if defined(NO_ASSEMBLY)
 	c = ((c >> 0) & 0xff) << 16 |
 	    ((c >> 8) & 0xff) << 8 |
 	    ((c >> 16) & 0xff) << 0;
--- a/src/vgapix.c
+++ b/src/vgapix.c
@@ -26,7 +26,7 @@ static inline int RGB2BGR(int c)
 /* However bswap is not supported by 386 */
 
     if (MODEFLAGS & RGB_MISORDERED)
-#ifdef __alpha__
+#if defined(NO_ASSEMBLY)
 	c = ((c >> 0) & 0xff) << 16 |
 	    ((c >> 8) & 0xff) << 8 |
 	    ((c >> 16) & 0xff) << 0;
--- a/src/libvga.h
+++ b/src/libvga.h
@@ -9,7 +9,9 @@
 
 #include <string.h>
 # if defined __GLIBC__ && __GLIBC__ >= 2
+#  if defined(__alpha__) ||  defined(__i386__) || defined(__x86_64__)
 #include <sys/io.h>
+#  endif
 #endif
 
 /* --------------------- Macro definitions shared by library modules */
@@ -95,30 +97,13 @@
 #define SVGAMODE(mode)   (chipset_modeavailable(mode) == SVGADRV)
 
 #ifdef __alpha__
-#include <asm/io.h>
-#include <linux/autoconf.h>
-#if defined(CONFIG_ALPHA_JENSEN)
-#define DENSE_MEM_BASE  EISA_MEM
-#define SPARSE_MEM_BASE EISA_MEM
-#define MEM_SHIFT       7
-#define MEM_TYPE_BYTE   0x00
-#define MEM_TYPE_WORD   0x20
-#define MEM_TYPE_LONG   0x60
-#elif defined(CONFIG_ALPHA_CABRIOLET)
-#define DENSE_MEM_BASE  APECS_DENSE_MEM
-#define SPARSE_MEM_BASE APECS_SPARSE_MEM
-#define MEM_SHIFT       5
-#define MEM_TYPE_BYTE   0x00
-#define MEM_TYPE_WORD   0x08
-#define MEM_TYPE_LONG   0x18
-#elif defined(CONFIG_ALPHA_NONAME)
 #define DENSE_MEM_BASE  LCA_DENSE_MEM
 #define SPARSE_MEM_BASE LCA_SPARSE_MEM
 #define MEM_SHIFT       5
 #define MEM_TYPE_BYTE   0x00
 #define MEM_TYPE_WORD   0x08
 #define MEM_TYPE_LONG   0x18
-#endif
+
 #define SPARSE_GRAPH_BASE (SPARSE_MEM_BASE + (0xA0000 << MEM_SHIFT))
 #define GRAPH_BASE (DENSE_MEM_BASE + 0xA0000)	/* this is wrong for */
 #define FONT_BASE  (DENSE_MEM_BASE + 0xA0000)	/* jensen type hardware */
@@ -216,34 +201,44 @@ extern void __svgalib_releasevt_signal(i
 extern void __svgalib_acquirevt_signal(int n);
 #endif
 
-#ifdef __alpha__
-
-#include <asm/io.h>
+#if defined(__alpha__)
 
 static __inline__ void port_out(int value, int port)
 {
-    _outb(value, port);
+    outb(value, port);
 }
 
 static __inline__ void port_outw(int value, int port)
 {
-    _outw(value, port);
+    outw(value, port);
+}
+
+static __inline__ void port_outl(int value, int port)
+{
+    outl(value, port);
 }
 
 static __inline__ int port_in(int port)
 {
-    return _inb(port);
+    return inb(port);
 }
 
 static __inline__ int port_inw(int port)
 {
-    return _inw(port);
+    return inw(port);
+}
+
+static __inline__ int port_inl(int port)
+{
+    return inl(port);
 }
 
 #undef inb
 #undef inw
+#undef inl
 #undef outb
 #undef outw
+#undef outl
 
 extern unsigned long vga_readb(unsigned long base, unsigned long off);
 extern unsigned long vga_readw(unsigned long base, unsigned long off);
@@ -268,6 +263,30 @@ extern void vga_writew(unsigned short b,
 #define gr_writel(v,off)	(*(((unsigned int*)GM)+(off)) = (v))
 #endif
 
+#elif defined(NO_ASSEMBLY)
+
+/* XXX: Completely bogus.. */
+static __inline__ void port_out(int value, int port) { }
+static __inline__ void port_outw(int value, int port) { }
+static __inline__ void port_outl(int value, int port) { }
+static __inline__ int port_in(int port) { return 0; }
+static __inline__ int port_inw(int port) { return 0; }
+static __inline__ int port_inl(int port) { return 0; }
+
+#undef inb
+#undef inw
+#undef inl
+#undef outb
+#undef outw
+#undef outl
+
+#define gr_readb(off)		(((volatile unsigned char *)GM)[(off)])
+#define gr_readw(off)		(*(volatile unsigned short*)((GM)+(off)))
+#define gr_readl(off)		(*(volatile unsigned long*)((GM)+(off)))
+#define gr_writeb(v,off)	(GM[(off)] = (v))
+#define gr_writew(v,off)	(*(unsigned short*)((GM)+(off)) = (v))
+#define gr_writel(v,off)	(*(unsigned long*)((GM)+(off)) = (v))
+
 #else
 
 static __inline__ void port_out(int value, int port)
--- a/src/vga.c
+++ b/src/vga.c
@@ -519,7 +519,14 @@ int __svgalib_flipchar = '\x1b';		/* fli
 
 /* Chipset specific functions */
 
+#if defined(INCLUDE_VGA_DRIVER)
 DriverSpecs *__svgalib_driverspecs = &__svgalib_vga_driverspecs;
+#elif defined(INCLUDE_FBDEV_DRIVER)
+DriverSpecs *__svgalib_driverspecs = &__svgalib_fbdev_driverspecs;
+#else
+#warning "Please enable either vgadrv or fbdev as base drivers."
+#endif
+
 
 #ifndef BACKGROUND
 static void (*__svgalib_setpage) (int);	/* gives little faster vga_setpage() */
@@ -537,7 +544,9 @@ static void readconfigfile(void);
 DriverSpecs *__svgalib_driverspecslist[] =
 {
     NULL,			/* chipset undefined */
+#ifdef INCLUDE_VGA_DRIVER
     &__svgalib_vga_driverspecs,
+#endif
 #ifdef INCLUDE_ET4000_DRIVER
     &__svgalib_et4000_driverspecs,
 #else
@@ -1035,18 +1044,19 @@ void __svgalib_get_perm(void)
     /* If IOPERM is set, assume permissions have already been obtained */
     /* by a calling (exec-ing) process, e.g. ioperm(1). */
 
-    if (CHIPSET != FBDEV && getenv("IOPERM") == NULL)
+    if (CHIPSET != FBDEV && getenv("IOPERM") == NULL) {
 #ifdef __alpha__
 	if (ioperm(0x0000, 0x10000, 1)) {
 	    printf("svgalib: Cannot get I/O permissions.\n");
 	    exit(1);
 	}
-#else
+#elif defined(__i386__) || defined(__x86_64__)
 	if (ioperm(0x3b4, 0x3df - 0x3b4 + 1, 1)) {
 	    printf("svgalib: Cannot get I/O permissions.\n");
 	    exit(1);
 	}
 #endif
+    }
 
     /* Open /dev/mem (also needs supervisor rights; ioperm(1) can be */
     /* used together with a special group that has r/w access on */
@@ -1552,9 +1562,11 @@ int __svgalib_getchipset(void)
 	else
 #endif
 
+#ifdef INCLUDE_VGA_DRIVER_TEST
 	if (__svgalib_vga_driverspecs.test())
 	    CHIPSET = VGA;
 	else
+#endif
 	    /* else */
 	{
 	    fprintf(stderr, "svgalib: Cannot find EGA or VGA graphics device.\n");
@@ -2211,10 +2223,12 @@ void vga_safety_fork(void (*shutdown_rou
      */
 
     if (CHIPSET != FBDEV && getenv("IOPERM") == NULL) {
+#if defined(__alpha__) || defined(__i386__) || defined(__x86_64__)
 	if (iopl(3) < 0) {
 	    printf("svgalib(vga_safety_fork): Cannot get I/O permissions.\n");
 	    exit(1);
 	}
+#endif
     }
     /*
      * Actually the mmap's are inherited anyway (and not all are remade here),
@@ -2619,9 +2633,11 @@ vga_modeinfo *vga_getmodeinfo(int mode)
 	return &modeinfo;
     }
     modeinfo.flags = 0;
+#if defined(INCLUDE_VGA_DRIVER)
     if ((STDVGAMODE(mode) && mode != G320x200x256) || is_modeX)
 	__svgalib_vga_driverspecs.getmodeinfo(mode, &modeinfo);
     else
+#endif
 	/* Get chipset specific info for SVGA modes and */
 	/* 320x200x256 (chipsets may support more pages) */
 	chipset_getmodeinfo(mode, &modeinfo);
@@ -2950,7 +2966,9 @@ static void savestate(void)
 	memcpy(graph_buf, GM, GRAPH_SIZE);
     } else if (MODEX || CM == G800x600x16 || (STDVGAMODE(CM) && CM != G320x200x256)) {
 	/* for planar VGA modes, save the full 256K */
+#if defined(INCLUDE_VGA_DRIVER)
 	__svgalib_vga_driverspecs.setmode(GPLANE16, prv_mode);
+#endif
 #ifndef BACKGROUND	
 	if ((graph_buf = malloc(4 * GRAPH_SIZE)) == NULL) {
 #endif	
@@ -3384,7 +3402,9 @@ void vga_setdisplaystart(int a)
 	    /* SVGA card, use the standard VGA function */
 	    /* that works properly for Mode X. */
 	    /* Same goes for 16 color modes. */
+#if defined(INCLUDE_VGA_DRIVER)
 	    __svgalib_vga_driverspecs.setdisplaystart(a);
+#endif
 	    return;
 	}
     /* Call the regular display start function for the chipset */
--- a/gl/scale.c
+++ b/gl/scale.c
@@ -10,10 +10,18 @@
 #include "def.h"
 
 
-/* #define USE_ASM */
+#if defined (NO_ASSEMBLY)
+#undef USE_ASM
+#else
+/*
+ * XXX: The asm code needs fixing
+#define USE_ASM
+ */
+#undef USE_ASM
+#endif
 
 
-#ifdef __alpha__
+#ifdef NO_ASSEMBLY
 
 static inline int muldiv64(int m1, int m2, int d)
 {
@@ -41,7 +49,7 @@ static inline int muldiv64(int m1, int m
     return result;
 }
 
-#endif				/* !__alpha__ */
+#endif
 
 /* This is a DDA-based algorithm. */
 /* Iteration over target bitmap. */
--- a/src/Makefile
+++ b/src/Makefile
@@ -20,7 +20,7 @@ INCLUDES += -I$(srcdir)/src -I$(srcdir)/
 # Rules Section
 #----------------------------------------------------------------------
 
-DRIVERS = vgadrv.o regextr.o modetab.o
+DRIVERS = regextr.o modetab.o
 MODULES = vga.o \
           vgadraw.o vgaclear.o vgaline.o vgapix.o \
           vgapal.o vgacol.o vgamodesel.o vgamisc.o \
@@ -66,6 +66,13 @@ ifdef DEBUG_CONF
   DEFINES += -DDEBUG_CONF
 endif
 
+ifdef INCLUDE_VGA_DRIVER
+  VGA_DEFINES += -DINCLUDE_VGA_DRIVER
+  DRIVERS += vgadrv.o
+  ifdef INCLUDE_VGA_DRIVER_TEST
+    VGA_DEFINES += -DINCLUDE_VGA_DRIVER_TEST
+  endif
+endif
 ifdef INCLUDE_ET4000_DRIVER
   VGA_DEFINES += -DINCLUDE_ET4000_DRIVER
   DRIVERS += et4000.o vgahico.o 
--- a/src/vgaconvplanar.c
+++ b/src/vgaconvplanar.c
@@ -10,7 +10,7 @@
 #include "vga.h"
 #include "libvga.h"
 
-#if defined(__alpha__) || defined (NO_ASSEMBLY)
+#if defined (NO_ASSEMBLY)
 #undef USE_ASM
 #else
 #define USE_ASM
